#Exercicio 1.1
def comprimento(lista):
	if lista == []:
		return 0
	else:
		return 1 + comprimento(lista[1:])

#Exercicio 1.2
def soma(lista):
	if lista == []:
		return 0
	else:
		return lista[0] + soma(lista[1:])

#Exercicio 1.3
def existe(lista, elem):
	if lista == []:
		return False
	else:
		return lista[0] == elem or existe(lista[1:], elem)

#Exercicio 1.4
def concat(l1, l2):
    if l1 == []:
        return l2
    
    l2[0:0] = [l1[-1]]		# Vai buscar a tail do l1 e coloca-o à cabeça do l2
    return concat(l1[:-1], l2)
  
# 	l1 = [1, 2, 3]
# 	l2 = [4, 5, 6]
# 	l2[0:0] = l1
#  print(l2) # [1, 2, 3, 4, 5, 6]

#Exercicio 1.5
def inverte(lista):
	if lista == []:
		return []
	else:
		return [lista[-1]] + inverte(lista[:-1])

#Exercicio 1.6
def capicua(lista):
    # return lista == inverte(lista)
	if lista == [] or len(lista) == 1:
		return True
	else:
		if lista[0] == lista[-1]:
			return capicua(lista[1:-1])
	return False

#Exercicio 1.7
def concat_listas(lista):
	if lista == []:
		return []
	return concat(lista[0], concat_listas(lista[1:]))

#Exercicio 1.8
def substitui(lista, original, novo):
	pass

#Exercicio 1.9
def fusao_ordenada(lista1, lista2):
	if lista1 == []:
		return lista2
	if lista2 == []:
		return lista1

	if lista1[0] < lista2[0]:
		return concat([lista1[0]], fusao_ordenada(lista1[1:], lista2))
	return concat([lista2[0]], fusao_ordenada(lista1, lista2[1:]))
  

#Exercicio 1.10
def lista_subconjuntos_com_for_inutil(lista):
	if lista == []:
		return [[]]
	sub_result = lista_subconjuntos_com_for_inutil(lista[1:])
	return sub_result + [[lista[0]] + s for s in sub_result]

def lista_subconjuntos(lista):
	if lista == []:
		return [[]]

	sub_result = lista_subconjuntos(lista[1:])

	def combinar(elem, lista):
		if lista == []:
			return []
		return [[elem] + lista[0]] + combinar(elem, lista[1:])

	return sub_result + combinar(lista[0], sub_result)

#Exercicio 2.1
def separar(lista):
	if lista == []:
		return ([], [])
	a, b = lista[0]
	la, lb = separar(lista[1:])
	return([a]+la, [b]+lb)

#Exercicio 2.2
def remove_e_conta(lista, elem):
	pass

#Exercicio 3.1
def cabeca(lista):
	pass

#Exercicio 3.2
def cauda(lista):
	pass

#Exercicio 3.3
def juntar(l1, l2): # -> É uma função de zip!!
    if len(l1) != len(l2):
        return None
    if l1 == []:
        return []
    # Juntar as cabeças de cada um deles
    return [(l1[0], l2[0])] + juntar(l1[1:], l2[1:])

#Exercicio 3.4
def menor(lista):
	pass

#Exercicio 3.6
def max_min(lista):
	pass





2



import math

'''
ATENÇÃO: NO EXAME ESCRITO SAI SEMPRE UMA PERGUNTA DESTAS PARA ESCREVER A PAPEL E LÁPIS
'''

#Exercicio 4.1
impar = lambda x: x % 2 == 1

#Exercicio 4.2
positivo = lambda x: x > 0

#Exercicio 4.3
comparar_modulo = lambda x, y: abs(x) < abs(y)

#Exercicio 4.4
cart2pol = lambda x, y: (math.hypot(x, y), math.asin(y/math.hypot(x, y)))

#Exercicio 4.5
ex5 = lambda f, g, h: lambda x, y, z: h(f(x, y), g(y, z))

#Exercicio 4.6
def quantificador_universal(lista, f):
    if lista == []:
        return True
    
    return f(lista[0]) and quantificador_universal(lista[1:], f)

#Exercicio 4.8
def subconjunto(lista1, lista2):
    if lista1 == []:
        return True
    
    return lista1[0] in lista2 and subconjunto(lista1[1:], lista2)

#Exercicio 4.9
def menor_ordem(lista, f):
    if lista == []:
        return None
    
    menor = menor_ordem(lista[1:], f)
    
    if menor == None or f(lista[0], menor):
        return lista[0]
    return menor

#Exercicio 4.10
def menor_e_resto_ordem(lista, f):
    if lista == []:
        return None, []
    
    menor, resto = menor_e_resto_ordem(lista[1:], f)
    
    if menor == None or f(lista[0], menor):
        return lista[0], lista[1:]
    return menor, [lista[0]] + resto

#Exercicio 5.2 #-> Muito bom
def ordenar_seleccao(lista, ordem):
    if lista == []:
        return []
    
    menor, resto = menor_e_resto_ordem(lista, ordem)
    
    return [menor] + ordenar_seleccao(resto, ordem)
